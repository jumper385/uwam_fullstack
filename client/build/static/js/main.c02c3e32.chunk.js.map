{"version":3,"sources":["pages/Articles.js","App.js","serviceWorker.js","index.js","pages/Create.js"],"names":["Articles","componentDidMount","a","axios","get","articles","setState","data","console","log","state","this","map","article","index","key","_id","title","Component","App","to","exact","path","Create","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","onChange","e","target","name","value","onSubmit","preventDefault","join","__dirname","post","allArticles","bind","type","onClick","source"],"mappings":"8PA6BeA,E,2MAxBbC,kB,sBAAoB,4BAAAC,EAAA,sEACGC,IAAMC,IAAI,iBADb,OACdC,EADc,OAElB,EAAKC,SAAS,CAACD,SAASA,EAASE,OACjCC,QAAQC,IAAI,EAAKC,OAHC,2C,wEAOlB,OACE,6BACE,gDACA,6BACGC,KAAKD,MAAQC,KAAKD,MAAML,SAASO,KAAI,SAACC,EAASC,GAC9C,OACE,yBAAKC,IAAKF,EAAQG,KACfH,EAAQI,MADX,OACsBJ,EAAQG,QAG7B,gC,GAnBQE,aC4BRC,E,iLAtBT,OACE,kBAAC,IAAD,KACE,6BACE,6DACA,6BACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,oBAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,mBAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,kBAAT,sBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAW,qCAC7B,kBAAC,IAAD,CAAOA,KAAK,oBAAmB,kBAAC,EAAD,OAC/B,kBAAC,IAAD,CAAOA,KAAK,mBAAkB,wCAC9B,kBAAC,IAAD,CAAOA,KAAK,kBAAiB,kBAACC,EAAA,EAAD,c,GAhBzBC,IAAMN,WCKJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,oME9HbhB,E,YAEJ,WAAYiB,GAAO,IAAD,8BAChB,4CAAMA,KAIRC,SAAW,SAAAC,GACT,EAAKpC,SAAL,eAAgBoC,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,SANxB,EASlBC,SATkB,uCASP,WAAOJ,GAAP,eAAAxC,EAAA,6DACTwC,EAAEK,iBACFvC,QAAQC,IAAIa,IAAK0B,KAAKC,EAAW,kBAFxB,SAGQ9C,IAAM+C,KAAK5B,IAAK0B,KAAKC,EAAW,iBAAkB,EAAKvC,OAH/D,8BAIeP,IAAMC,IAAIkB,IAAK0B,KAAKC,EAAW,kBAJ9C,OAILE,EAJK,OAKT3C,QAAQC,IAAI0C,GALH,2CATO,sDAEhB,EAAKV,SAAW,EAAKA,SAASW,KAAd,gBAChB,EAAK1C,MAAQ,CAACG,QAAQ,cAHN,E,sEAkBhB,OACE,6BACE,oDACA,0EACA,8BACE,oCACA,2BAAO+B,KAAK,QAAQS,KAAK,OAAOZ,SAAU9B,KAAK8B,WAC/C,sCACA,8BAAUG,KAAK,UAAUH,SAAU9B,KAAK8B,WACxC,6BACA,4BAAQa,QAAS3C,KAAKmC,UAAtB,WAEF,kBAAE,IAAF,CAAgBS,OAAQ5C,KAAKD,MAAMG,SAAW,4B,GAhCjCK,aAsCNK,Q","file":"static/js/main.c02c3e32.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nclass Articles extends Component {\r\n\r\n  componentDidMount = async() => {\r\n    let articles = await axios.get('/api/articles')\r\n    this.setState({articles:articles.data})\r\n    console.log(this.state)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Current Articles</h1>\r\n        <div>\r\n          {this.state ? this.state.articles.map((article, index) => {\r\n            return(\r\n              <div key={article._id}>\r\n                {article.title} || {article._id}\r\n              </div>\r\n            )\r\n          }) : 'no articles just yet...' }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Articles","import React from 'react';\r\nimport axios from 'axios';\r\nimport path from 'path';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport Create from './pages/Create';\r\nimport Articles from './pages/Articles'\r\n\r\nclass App extends React.Component {\r\n    render(){\r\n      return(\r\n        <Router>\r\n          <div>\r\n            <h1>UWA Motorsports - EV Showcase</h1>\r\n            <nav>\r\n              <Link to='/client/'>Home</Link>\r\n              <Link to='/client/articles'>Articles</Link>\r\n              <Link to='/client/gallery'>Gallery</Link>\r\n              <Link to='/client/create'>Create an Article</Link>\r\n            </nav>\r\n            <Switch>\r\n              <Route exact path='/client/'><h1>Home</h1></Route>\r\n              <Route path='/client/articles'><Articles /></Route>\r\n              <Route path='/client/gallery'><h1>Gallery</h1></Route>\r\n              <Route path='/client/create'><Create /></Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react'\r\nimport ReactMarkdown from 'react-markdown' \r\nimport path from 'path'\r\nimport axios from 'axios'\r\n\r\nclass Create extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.onChange = this.onChange.bind(this)\r\n    this.state = {article:'no article'}\r\n  }\r\n  onChange = e => {\r\n    this.setState({[e.target.name]:e.target.value})\r\n  }\r\n\r\n  onSubmit = async (e) => {\r\n    e.preventDefault()\r\n    console.log(path.join(__dirname, '/api/articles'))\r\n    let data = await axios.post(path.join(__dirname, '/api/articles'), this.state)\r\n    let allArticles = await axios.get(path.join(__dirname, '/api/articles'))\r\n    console.log(allArticles)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Create a New Article</h1>\r\n        <p>Articles need to be written!!! 🤯</p>\r\n        <form>\r\n          <p>Title</p>\r\n          <input name='title' type='text' onChange={this.onChange}/>\r\n          <p>Article</p>\r\n          <textarea name='article' onChange={this.onChange}/>\r\n          <br />\r\n          <button onClick={this.onSubmit}>Submit</button>\r\n        </form>\r\n        < ReactMarkdown source={this.state.article || 'no article present'}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Create"],"sourceRoot":""}