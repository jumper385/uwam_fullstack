{"version":3,"sources":["pages/Articles.js","pages/ArticlePage.js","App.js","serviceWorker.js","index.js","pages/Create.js"],"names":["Articles","componentDidMount","a","axios","get","articles","console","log","setState","data","onClick","e","delete","id","target","name","deleteData","this","state","map","article","index","key","_id","to","title","Component","ArticlePage","axiosData","props","source","App","exact","path","Create","render","match","params","React","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","onChange","value","onSubmit","preventDefault","join","__dirname","post","allArticles","onUploadChange","file","files","onSubmitFile","formData","FormData","append","filename","recentFilename","bind","type"],"mappings":"8PAsCeA,E,2MAhCbC,kB,sBAAoB,4BAAAC,EAAA,sEACGC,IAAMC,IAAI,iBADb,OACdC,EADc,OAElBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACH,SAASA,EAASI,OAHf,2C,EAMpBC,Q,uCAAU,WAAMC,GAAN,iBAAAT,EAAA,sEACeC,IAAMS,OAAO,gBAAgB,CAACH,KAAK,CAACI,GAAGF,EAAEG,OAAOC,QAD/D,cACJC,EADI,gBAEab,IAAMC,IAAI,iBAFvB,OAEJC,EAFI,OAGR,EAAKG,SAAS,CAACH,SAASA,EAASI,OACjCH,QAAQC,IAAIS,GAJJ,2C,8HAOA,IAAD,OACP,OACE,6BACE,gDACA,6BACGC,KAAKC,MAAQD,KAAKC,MAAMb,SAASc,KAAI,SAACC,EAASC,GAC9C,OACE,yBAAKC,IAAKF,EAAQG,KAChB,kBAAC,IAAD,CAAMC,GAAE,2BAAsBJ,EAAQG,MAAQH,EAAQK,MAAtD,OAAiEL,EAAQG,KACzE,4BAAQR,KAAMK,EAAQG,IAAKb,QAAS,EAAKA,SAAzC,SAGD,gC,GA3BQgB,a,iBC0BRC,E,2MAxBXC,U,sBAAY,kCAAA1B,EAAA,sEACSC,IAAMC,IAAN,wBAA2B,EAAKyB,MAAMpB,OAD/C,cACJA,EADI,gBAEuBA,EAAKA,KAF5B,gBAEFW,EAFE,EAEFA,QAASK,EAFP,EAEOA,MACf,EAAKjB,SAAS,CAACY,QAAQA,EAASK,MAAMA,IACtCnB,QAAQC,IAAI,EAAKW,OAJT,4C,mFAQRZ,QAAQC,IAAIU,KAAKY,OACjBZ,KAAKW,c,+BAML,OAFAtB,QAAQC,IAAIU,KAAKY,OAGb,6BACI,4BAAKZ,KAAKC,MAAQD,KAAKC,MAAMO,OAAS,uBAAyB,oBAC/D,kBAAC,IAAD,CAAeK,OAAQb,KAAKC,MAAQD,KAAKC,MAAME,SAAW,yBAA2B,4B,GApB3EM,aC6BXK,E,iLAvBT,OACE,kBAAC,IAAD,KACE,6BACE,6DACA,6BACE,kBAAC,IAAD,CAAMP,GAAG,YAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,oBAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,mBAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,kBAAT,sBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,YAAW,qCAC7B,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,oBAAmB,kBAAC,EAAD,OACrC,kBAAC,IAAD,CAAOA,KAAK,mBAAkB,wCAC9B,kBAAC,IAAD,CAAOA,KAAK,kBAAiB,kBAACC,EAAA,EAAD,OAC7B,kBAAC,IAAD,CAAOD,KAAK,uBAAuBE,OAAQ,gBAAEC,EAAF,EAAEA,MAAF,OAAa,kBAAC,EAAD,CAAa3B,KAAM2B,EAAMC,OAAOxB,e,GAjBpFyB,IAAMZ,WCIJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2DCbNO,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mME9HbjB,E,YAEJ,WAAYL,GAAO,IAAD,8BAChB,4CAAMA,KAIRuB,SAAW,SAAAzC,GACT,EAAKH,SAAL,eAAgBG,EAAEG,OAAOC,KAAMJ,EAAEG,OAAOuC,SANxB,EASlBC,SATkB,uCASP,WAAO3C,GAAP,eAAAT,EAAA,6DACTS,EAAE4C,iBACFjD,QAAQC,IAAI0B,IAAKuB,KAAKC,EAAW,kBAFxB,SAGQtD,IAAMuD,KAAK,gBAAiB,EAAKxC,OAHzC,8BAIef,IAAMC,IAAI,iBAJzB,OAILuD,EAJK,OAKTrD,QAAQC,IAAIoD,GALH,2CATO,wDAiBlBC,eAjBkB,uCAiBD,WAAOjD,GAAP,SAAAT,EAAA,sDACf,EAAKM,SAAS,CAACqD,KAAMlD,EAAEG,OAAOgD,MAAM,KADrB,2CAjBC,wDAqBlBC,aArBkB,uCAqBH,WAAMpD,GAAN,iBAAAT,EAAA,6DACbS,EAAE4C,kBACES,EAAW,IAAIC,UACVC,OAAO,QAAS,EAAKhD,MAAM2C,MAHvB,SAIS1D,IAAMuD,KAAK,cAAeM,GAJnC,OAITpC,EAJS,OAKbtB,QAAQC,IAAIqB,EAAUnB,KAAK0D,UAC3B,EAAK3D,SAAS,CAAC4D,eAAexC,EAAUnB,KAAK0D,WANhC,2CArBG,sDAEhB,EAAKf,SAAW,EAAKA,SAASiB,KAAd,gBAChB,EAAKnD,MAAQ,CAACE,QAAQ,cAHN,E,sEA+BhB,OACE,6BACE,oDACA,0EACA,6BACA,8CACA,8BACE,2BAAOL,KAAK,QAAQqC,SAAUnC,KAAK2C,eAAgBU,KAAK,SACxD,2BAAOA,KAAK,SAAS5D,QAASO,KAAK8C,gBAErC,2BAAI,sDAA+C9C,KAAKC,MAAMkD,kBAAoB,GAClF,6BACA,8BACE,oCACA,2BAAOrD,KAAK,QAAQuD,KAAK,OAAOlB,SAAUnC,KAAKmC,WAC/C,sCACA,8BAAUrC,KAAK,UAAUqC,SAAUnC,KAAKmC,WACxC,6BACA,4BAAQ1C,QAASO,KAAKqC,UAAtB,WAEF,kBAAE,IAAF,CAAgBxB,OAAQb,KAAKC,MAAME,SAAW,4B,GArDjCM,aA2DNQ,Q","file":"static/js/main.899c68c7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Articles extends Component {\r\n\r\n  componentDidMount = async() => {\r\n    let articles = await axios.get('/api/articles')\r\n    console.log(articles)\r\n    this.setState({articles:articles.data})\r\n  }\r\n\r\n  onClick = async e => {\r\n    let deleteData = await axios.delete('/api/articles',{data:{id:e.target.name}})\r\n    let articles = await axios.get('/api/articles')\r\n    this.setState({articles:articles.data})\r\n    console.log(deleteData)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Current Articles</h1>\r\n        <div>\r\n          {this.state ? this.state.articles.map((article, index) => {\r\n            return(\r\n              <div key={article._id}>\r\n                <Link to={`/client/articles/${article._id}`}>{article.title} || {article._id}</Link>\r\n                <button name={article._id} onClick={this.onClick}>x</button>\r\n              </div>\r\n            )\r\n          }) : 'no articles just yet...' }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Articles","import React, {Component} from 'react'\r\nimport ReactMarkdown from 'react-markdown' \r\nimport axios from 'axios'\r\n\r\nclass ArticlePage extends Component {\r\n\r\n    axiosData = async() => {\r\n        let data = await axios.get(`/api/articles/${this.props.data}`)\r\n        let { article, title } = await data.data\r\n        this.setState({article:article, title:title})\r\n        console.log(this.state)\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.props)\r\n        this.axiosData()\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props)\r\n\r\n        return(\r\n            <div>\r\n                <h1>{this.state ? this.state.title || 'no title just yet...' : 'loading title...'}</h1>\r\n                <ReactMarkdown source={this.state ? this.state.article || 'no article just yet...' : 'loading article...'}/> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArticlePage","import React from 'react';\r\nimport axios from 'axios';\r\nimport path from 'path';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport Create from './pages/Create';\r\nimport Articles from './pages/Articles'\r\nimport ArticlePage from './pages/ArticlePage'\r\n\r\nclass App extends React.Component {\r\n    render(){\r\n      return(\r\n        <Router>\r\n          <div>\r\n            <h1>UWA Motorsports - EV Showcase</h1>\r\n            <nav>\r\n              <Link to='/client/'>Home</Link>\r\n              <Link to='/client/articles'>Articles</Link>\r\n              <Link to='/client/gallery'>Gallery</Link>\r\n              <Link to='/client/create'>Create an Article</Link>\r\n            </nav>\r\n            <Switch>\r\n              <Route exact path='/client/'><h1>Home</h1></Route>\r\n              <Route exact path='/client/articles'><Articles /></Route>\r\n              <Route path='/client/gallery'><h1>Gallery</h1></Route>\r\n              <Route path='/client/create'><Create /></Route>\r\n              <Route path='/client/articles/:id' render={({match}) => <ArticlePage data={match.params.id}/>} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Component } from 'react'\r\nimport ReactMarkdown from 'react-markdown' \r\nimport path from 'path'\r\nimport axios from 'axios'\r\n\r\nclass Create extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.onChange = this.onChange.bind(this)\r\n    this.state = {article:'no article'}\r\n  }\r\n  onChange = e => {\r\n    this.setState({[e.target.name]:e.target.value})\r\n  }\r\n\r\n  onSubmit = async (e) => {\r\n    e.preventDefault()\r\n    console.log(path.join(__dirname, '/api/articles'))\r\n    let data = await axios.post('/api/articles', this.state)\r\n    let allArticles = await axios.get('/api/articles')\r\n    console.log(allArticles)\r\n  }\r\n\r\n  onUploadChange = async (e) => {\r\n    this.setState({file: e.target.files[0]})\r\n  }\r\n\r\n  onSubmitFile = async(e) => {\r\n    e.preventDefault()\r\n    let formData = new FormData()\r\n    formData.append('photo', this.state.file)\r\n    let axiosData = await axios.post('/api/images', formData)\r\n    console.log(axiosData.data.filename)\r\n    this.setState({recentFilename:axiosData.data.filename})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Create a New Article</h1>\r\n        <p>Articles need to be written!!! 🤯</p>\r\n        <br />\r\n        <p>Submit an Image</p>\r\n        <form>\r\n          <input name='photo' onChange={this.onUploadChange} type='file' />\r\n          <input type='submit' onClick={this.onSubmitFile}/>\r\n        </form>\r\n        <p>{`copy this URL for the last img: /api/images/${this.state.recentFilename}` || 'no recent image id'}</p>\r\n        <br />\r\n        <form>\r\n          <p>Title</p>\r\n          <input name='title' type='text' onChange={this.onChange}/>\r\n          <p>Article</p>\r\n          <textarea name='article' onChange={this.onChange}/>\r\n          <br />\r\n          <button onClick={this.onSubmit}>Submit</button>\r\n        </form>\r\n        < ReactMarkdown source={this.state.article || 'no article present'}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Create"],"sourceRoot":""}